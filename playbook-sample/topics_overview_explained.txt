1. Operations on Variables (String Manipulation and Arithmetic)
This playbook demonstrates how to perform operations on variables, including string manipulation and arithmetic operations.

Playbook: Operations on Variables
yaml
Copy
Edit
#!/root/ansible/myansible/bin/ansible-playbook
- name: Display filter and method operations on variables
  hosts: localhost
  gather_facts: false
  vars:
    a: "HeLLo tHiS is Akshay and i aM learning"
    b: 10
    c: "20"

  tasks:
    - name: Operations on variables
      debug:
        msg:
          - "value of a is : {{ a }}"
          - "value of b + c is : {{ b + c | int }}"
          - "Small case value of a : {{ a | lower }}"
          - "Capital case value of a: {{ a | upper }}"
          - "Title case value of a : {{ a | title }}"
          - "Small case value of a : {{ a.lower() }}"
          - "Capital case value of a: {{ a.upper() }}"
          - "Split of string a : {{ a.split() }}"
Key Filters:

lower: Converts to lowercase.

upper: Converts to uppercase.

title: Capitalizes the first letter of each word.

split(): Splits a string into a list.

int: Converts a string to an integer.

Arithmetic Operations on Variables
yaml
Copy
Edit
#!/root/ansible/myansible/bin/ansible-playbook
- name: Display arithmetic operations on variables
  hosts: localhost
  gather_facts: false
  vars:
    a: 10
    b: 20

  tasks:
    - name: Arithmetic operations on variables
      debug:
        msg:
          - "value of a is : {{ a }}"
          - "value of b is : {{ b }}"
          - "Addition of a & b : {{ a + b }}"
          - "Subtraction of a & b : {{ a - b }}"
          - "Multiplication of a & b : {{ a * b }}"
          - "Division of a & b : {{ a / b }}"
Operations:

Addition: a + b

Subtraction: a - b

Multiplication: a * b

Division: a / b

2. Using the Debug Module
This section explores how to use the debug module in Ansible to display messages and variable values.

Playbook: Debugging and Displaying Variables
yaml
Copy
Edit
#!/root/ansible/myansible/bin/ansible-playbook
- name: Overview of Ansible Debug Module
  hosts: all
  remote_user: ec2-user
  become: 'yes'
  become_user: root

  tasks:
    - name: Task for Debug Module Messaging
      debug:
        msg: "Hi, this is a custom message for the Debug Module"

    - name: Prints two lines of messages
      debug:
        msg:
          - "Hi, this is a multiline message."
          - "And I am line number 2..."

    - name: Print variable in messages
      debug:
        msg:
          - "Host IP is - {{ inventory_hostname }}"
          - "Host IP is - {{ inventory_hostname }}"
          - "System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}"

    - name: Debugging a variable
      debug:
        var: inventory_hostname

    - name: Debug with verbosity
      debug:
        msg: "Hi, this is deep logging at debug level 2"
        verbosity: 2
Key Features:

The debug module is used to print custom messages or variable values.

The verbosity option increases the detail level in logs.

3. Ansible Data Collection and Variable Usage
Learn how to collect and display different data types such as lists, dictionaries, and strings in Ansible.

Playbook: Data Collection Retrieval
yaml
Copy
Edit
#!/root/ansible/myansible/bin/ansible-playbook
- name: Overview of Ansible Data Collection
  hosts: all
  remote_user: ec2-user
  become: 'yes'
  become_user: root

  vars:
    xyz: "Hello this is XYZ"
    packages: ['wget', 'unzip', 'curl', 'vim']
    cities:
      - New York
      - London
      - Tokyo
      - Dubai
    web_server: {'Linux': 'httpd', 'Unix': 'apache2'}

  tasks:
    - name: Retrieve string data
      debug:
        var: xyz

    - name: Getting list of packages
      debug:
        var: packages

    - name: Getting list of cities
      debug:
        var: cities

    - name: Getting dictionary of web servers
      debug:
        var: web_server
Key Data Types:

String: xyz

List: packages, cities

Dictionary: web_server

4. Using register and set_fact for Variable Management
This section covers how to register output from commands and set new variables dynamically.

Playbook: Using Register and Set_Fact
yaml
Copy
Edit
#!/root/ansible/myansible/bin/ansible-playbook
- name: Overview of Ansible Register and Set_Fact
  hosts: all
  remote_user: ec2-user
  become: 'yes'
  become_user: root

  tasks:
    - name: Retrieve installed shell version
      shell: "bash --version"
      register: bash_ver

    - set_fact:
        bash_version: "{{ bash_ver.stdout_lines[0].split()[3] }}"

    - debug:
        var: bash_version
Registering Variables: The register keyword captures the output of a task (in this case, the bash version).

Setting Facts: The set_fact module is used to define new variables dynamically.

5. Conclusion: Key Concepts to Remember
Filters modify data (e.g., lower(), split(), int()).

Methods are applied to data types for operations like string methods (upper(), lower()) or list methods (sort(), reverse()).

Debugging helps in displaying variable values and custom messages.

Data Collection allows you to work with various data types (strings, lists, dictionaries).

register and set_fact are used to capture output and create new variables dynamically.
